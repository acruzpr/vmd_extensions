= VMD extension functions =

This is a collection of TCL-VMD functions that support extraction
of structural data from large-scale simulations. These functions
are currently meant for TCL-VMD programmers.  Features easy
semantics to
 * Iterate a block of code over frames
 * Iterate a block of code over trajectory files
 * Compute the number and fraction of native contacts
 * Compute distance matrices
 * ...and more

Please refer to the following table of contents for the full
feature list. (''Note'': If you are looking for a GUI to compute
the number of native contats, please see the
[[utilities/RMSDTTNC|RMSD trajectory tool enhanced with native contacts]] plugin.)

<<TableOfContents(2)>>

   
==  License  ==
Copyright (c) 2010-2012 
Universitat Pompeu Fabra (UPF) and National Research Council of Italy (CNR). 
Author:  <<MailTo(toni.giorgino AT isib DOT cnr DOT it)>> . 
By downloading the software you agree to comply with the terms of
GPL version 2.
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version. 

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>. 
   
==  Version  ==

Documentation autogenerated by {{{autodoc.awk}}} on Wed Nov 20 22:51:33 CET 2013
from {{{ $Id: VMDextensions.tcl 1033 2012-07-20 14:11:12Z toni $ }}}
   
==  Acknowledgments  ==
Work partially supported by the VPH-NoE and the Generalitat de Catalunya.
= Functions =
   
==  Iterate a TCL block over all frames  ==
 * ''' forFrames {framenum sel block {step 1}} '''

    Iterator over frames in the current selection. While in ''block'', the first argument is set to the (integer) current frame number. The selection is used to get the frame range, and is automatically set with "frame" before executing the block. Note that, like '''for''', the variable name does not require the dollar symbol. Example: {{{ forFrames fno $sel { puts "$fno: [measure rgyr $sel ]" } }}} ''Notes.'' If the selection is subject to changes between frames, please perform a "$sel update" inside the block. If you are using more than one selection, pass only the first as an argument and, if necessary, update the others inside the block.

 * ''' forFramesMeasure {framenum sel block} '''

    Similar to forFrames (in fact it is a plug-in replacement). If the block returns a value, also builds a list with the returned values.

   
==  Iterate a TCL block over a set of files  ==
 * ''' forFiles {filename pattern block} '''

    Iterator over files matched by the given pattern. The matched files are loaded in sequence, sorted in [[http://sourcefrog.net/projects/natsort/|natural order]], and the block is executed. When executing the block, the first argument is set to the current file name (note that, like '''for''', it does not require the dollar symbol). For example: {{{ forFiles fn {*.dcd} { puts "$fn has [ molinfo top get numframes ] frames" } }}}

   
==  Compute the number of native contacts  ==
Computation of the number of native contacts requires two steps:
(1) creation of a "reference" list, i.e.  the native state; (2)
the actual measurement. In the current version, both should come
from the same structure. Contacts is based on VMD's ''measure
contacts'' feature and therefore can be performed on one
(intra-molecular) or two (inter-molecular) selections. 

For a GUI to compute native contacts, see the new
[[toni/RMSDTTNC|RMSD trajectory tool + NC extension]].

Limitations: 
 * For native contacts, the "reference" structure must be equivalent  to the one to be analyzed (same # of atoms)

Example usage:
{{{
 set chaina [ atomselect top "chain A" ];
 set ref [ prepareNativeContacts 7 $chaina ];
     (go or select the frame of interest)
 measureNativeContacts $ref 7 $chaina;
}}}
 * ''' residueContacts {cutoff query target} '''

    Given the frame, compute whether each residue in query is making contact (< cutoff) with target. Return list like { { R1 0 } {R2 1 } ... } where R1, R2 etc belong to query

 * ''' residueContactPairs { cutoff sel1 sel2 } '''

    Like measure contacts, but return resid's rather than indices. Return a list of (unique-ified) residue contacts as { R1 R2 } { R1 R3 } ... where the first element of a pair is a resid in sel1 and the second is in sel2. all computations are taken in the selections' frames.

 * ''' firstContactTimeMatrix { cutoff sel1 sel2 } '''

    Return a matrix (as a serialized array) with the time for first contact of each contact pair. Times may be missing if they never do a first contact! Example: set fctm [firstContactTimeMatrix 5 $a $b]

 * ''' prepareNativeContacts { cutoff sel1 {sel2 0} } '''

    Prepare the "reference" list of native contacts, e.g. from the crystal structure. Return value: a list of native contact pairs (only useful to be passed as an argument to measureNativeContacts, or to get its length) Note. The function is subject to change. Later can save sizes of atomselections (for safety checking) and/or cutoff.

 * ''' measureNativeContacts { nclist cutoff sel1 {sel2 0} } '''

   

   
==  Compute distance matrices  ==
 * ''' residueDistanceMatrix { sel1 sel2 } '''

    Given two atom selection, return the distance matrix (in longitudinal form: {{{ { { r1 r2 dist} ... } }}} ) between residues in given selections. All selected atoms will be considered for each residue, and the minimum distance per residue pair returned. This can be slow. If using only an atom per residue (eg CA), consider using atomDistanceMatrix for speed. Residues are taken from the ''resid'' attribute.

 * ''' residueDistanceMatrixApprox { sel1 sel2 bins } '''

    Similar to residueDistanceMatrix, but much faster implementation which returns a discrete distance (taken from the bins list). For each residue pair, the distance will be the next higher value in {bins}. Runtime is O([llength $bins]). Returns a list of { {rid1 rid2 dist} ... }

 * ''' atomDistanceMatrix { sel1 sel2 } '''

    Return the atom distance matrix (in longitudinal form: { { r1 r2 dist} ... } ) between residues in given selections. There should be only one atom per residue in the selection. Residues are taken from the ''resid'' attribute.

 * ''' distanceProfileFull {lig prot {step 1} {dbins "2 3 4 5 6 7 10" }} '''

    Compute the distance profile between a ligand and a protein, i.e., by timestep and residue, the minimum distance between the two. Requires two atomselections (likely from the same molecule) and an optional list of distance bins. Returns a list of { { frame resid_lig resid_prot distance } ... } . This can be post-processed to compute all kind of profiles and istance matrices. {{{ Usage: set tt [distanceProfileFull $b $a]; true set ttf [open tt1.dat w]; printTable $tt "" $ttf; close $ttf or: set ttf [open tt2.dat w]; printTable [reshapeToWide $tt] "" $ttf; close $ttf }}}

 * ''' distanceProfile {lig prot {dbins "2 3 4 5 6 7 10" }} '''

    Compute the distance profile between a ligand and a protein, i.e., by timestep and residue, the minimum distance between the two. Requires two atomselections (likely from the same molecule) and an optional list of distance bins. Returns a list of { { frame resid distance } ... } <<BR>> Usage: set tt [distanceProfile $b $a]; true set ttf [open tt1.dat w]; printTable $tt "" $ttf; close $ttf or: set ttf [open tt2.dat w]; printTable [reshapeToWide $tt] "" $ttf; close $ttf

   
==  Quick plots  ==
 * ''' qplot { li { ly 0} } '''

    Quick plot function. Takes either a list of y values, or two lists, with x and y values. If two vectors are given, they are interpreted as ''x'' and ''y'' values respectively.

 * ''' qhist { bins li } '''

    Compute and plot the histogram of the values in the ''list'' passed as a second argument, binned in ''nbins'' equal-sized bins. Returns a list of two lists, the former being lower boundaries for the bins, and the latter are then counts.

   
==  Load multiple files  ==
 * ''' loadFrames {pattern} '''

    Usage: loadFrames 53-*.coor Will load all files starting with 53 (coordinates, dcd, whatever) in natural sort e.g. 44-bla-2-100.coor < 44-bla11-100.coor

 * ''' appendFrames {pattern} '''

    Usage: loadFrames 53-*.coor Will load all files starting with 53 (coordinates, dcd, whatever) in natural sort e.g. 44-bla-2-100.coor < 44-bla11-100.coor Error handling is tricky. The /tmp/appendFrames.[pid].log will be true in any case. The ... .ff file will contain infos on the last successfully loaded frame for each trajectory. Frames are 0-based.

 * ''' identifyFrame {} '''

    Identify current Frame

   
==  Renumber residues  ==
 * ''' renumber { sel start } '''

    Renumbers the residues in the atom selection so that they start from the given integer. Useful to re-match standard numbering. Note that if there are duplicate residue IDs (e.g. in the case of homo-multimers), the renumbered IDs will also be duplicate.

 * ''' renumber_from_1 { sel } '''

    Renumbers residues starting from 1, just as '''tleap''' does. Note that '''all''' residues will be renumbered irrespective of their original ''resid''. As a consequence, the identity of homo-multimers will be lost.

   
==  Structural analysis and geometry  ==
 * ''' helicity { sel { tol 40 } } '''

    Count the fraction of residues that have phi/psi in the canonical alpha region of the Ramachandran plot (&phi;,&psi;)=(-57,-47). Pass a selection of CA only. The ''tolerance'' argument sets the allowed slack (default 40 degrees). The result is normalized to 1.0 for a fully alpha-helical segment.

 * ''' helicity_3 { sel { tol 40 } { debug 0 } } '''

    Count helicities as in: Kelley J Mol Biol. 2009 May 22; 388(5):919–927. At least 3 residues within the canonical Ramachandran alpha region are required to count one. Pass a selection of CA only. The result is normalized to 1.0 for a fully alpha-helical segment.

 * ''' atomselectRefine {sel txt} '''

    Refine an atom selection: return a new atomselection consisting of the atoms in the old one, as long as they ALSO match the selection text txt

 * ''' veccenter {l} '''

    Return a zero-centered version of the input list

 * ''' vecangle {d1 d2} '''

    Returns the angle between two vectors

 * ''' transinertia {sel} '''

    Return the matrix which reorients the principal axes of inertia with x, y, z. The largest inertia axis will be aligned along z.

 * ''' boundingBoxCenter {sel} '''

    Return the center of the bounding box for the selection $sel.

 * ''' minDist {s1 s2} '''

    Compute the minimum distance between atoms in selections s1 and s2

   
==  Structural manipulation  ==
 * ''' addCaps { sel {cap both} } '''

    Mutate first and last residue of a selection so that tleap will turn them into ACE and NME caps. "cap" may be "ACE", "NME", or "both" (default).

 * ''' addCaps2 {sel {cap both}} '''

    Stronger version of addcaps - replaces whatever first and last atoms

 * ''' swap { s1 s2 } '''

    Exchange the positions of two atomselections (based on their centers)

   
==  Root-mean square calculations  ==
 * ''' rmsdOf { sel1 sel2 ref1 ref2 } '''

    Compute rmsd of all frames of sel wrt currently selected frame in ref. Per each frame, align ref1 to ref2, and measure RMSD of sel1 wrt sel2. sel1 and ref1 should belong to the same molecule (the trajectory under study, multiple frames). Sel2 and ref2 should belong to the same molecule (the reference frame). Return a list of RMSD values (one per frame in sel). If sel2 is the string ROTATE, rmsd is not computed, but sel1 is rotated instead.

 * ''' rmsfTrajectory {sel {win 10} {step 1}} '''

    Compute average rmsf by sliding windows of width win. RMSF will be averaged by weight.

 * ''' rmsfTrajectoryColor {sel {win 10}} '''

    Compute average rmsf by sliding windows of width win. RMSF will be averaged by weight. Assign it to the "user" attribute at each frame.

   
==  Format conversions  ==
 * ''' writePQR { sel filename } '''

    Write a crude PQR file using radiuses and masses in the topology (radii may not be appropriate for APBS calculations! use pdb2pqr instead!) Note that this preserves the CHAIN id. VMD PQR loader misparses the file.

 * ''' writePlumed { sel filename } '''

    Write a PDB file using charges and masses in the topology (required by PLUMED's "driver" utility)

 * ''' writePlumedRef { sel filename } '''

    Write a PDB file to be used as a reference in PATH cvs. Assumes that occupancy and beta are set according to the align intentions.

 * ''' writePDBTER { sel fname } '''

    Write a PDB file containing TER cards to separate fragments. This is useful for software like ''tleap'' which requires them. ''$sel'' must be an atom-selection function (as returned by atomselect). For a fuller implementation, see also [[utilities/PdbTer]].

 * ''' writeNullVelFile {as fname} '''

    Write null velocity file corresponding to the current structure

 * ''' getFasta {osel} '''

    Returns the 1-letter sequence of a selection (looking at CA only)

   
==  Save VMD representations  ==
 * ''' dumpRepresentations {} '''

    Create a list of "mol" commands that reproduce the current top molecule display.

   
==  Matrix and list manipulation  ==
 * ''' transpose {matrix} '''

    Transpose a 2D table (list of lists). From [[http://wiki.tcl.tk/2748]]

 * ''' lseq {from to {step 1}} '''

    Sequence of integers from $from to $to, step by $step

 * ''' arrayIndices { arr } '''

    Given an array indexed by A,B pairs, return sorted row and column indices.

 * ''' printTable { ll { prepend "" } { ch stdout } { fmt "%s " } } '''

    Pretty-print a 2D array (list of lists). Each line is prepended by the optional "extra" argument, a string, and output on the given channel (stdout if not given).

 * ''' printArray { tmp { prepend "" } { ch stdout } { fmt "%s " } } '''

    Pretty-print an array, prepending rows and columns

 * ''' reshapeLongToArray { table } '''

    Reshape a matrix in "long" format into an array format. No order is assumed. Returns a list containing: 1. the serialized array; 2. the list of rows (first index); 3. the list of columns (second index). This is a convenient matrix format for interchanging data.

 * ''' reshapeArrayToWide { tmp } '''

    Reshape array format into "wide". No order is assumed.

 * ''' reshapeLongToWide { table } '''

    Reshape a matrix in "long" format into a "wide" (rectangular) format The first column will be used as row index, the second as column. No order is assumed

 * ''' reshapeArrayToLong { tmp } '''

   

= Examples =

== Native contacts ==

A (deliberately verbose) example for computing native contacts.

{{{
        ## The atom selection
	set chaina [ atomselect top "chain A and name CA" ]

        ## Use first trajectory frame as a reference
	$chaina frame 0
	set ref [ prepareNativeContacts 7 $chaina ]

        ## Get the number of native contacts (for computing their fraction)
	set nnc [ llength $ref ]
	puts "There are $nnc contacts in the native state"

                    # Now, for each frame,
	forFrames fno $chaina {
                    # compute number of native contacts,
		set nc [measureNativeContacts $ref 7 $chaina]  
                    # their fraction,
		set qnc [ expr 100.0 * $nc / $nnc ]
                    # and print both.
		puts [ format "Frame %d: %f, %.3f%%" $fno $nc $qnc ]
	}
}}}

== Secondary structure ==

Iterating over frames

{{{
    forFrames fn $kid {
        animate goto $fn
        mol ssrecalc [$kid molid]
        puts "$fn [vecmean [$kid get alpha_helix]]" 
    }
}}}


== RMSD for all files (in a directory) and frames ==

Variables {{{$compare}}} and {{{$reference}}} should be two atomselections in different molecules. The former should be the TOP molecule.

{{{ 
forFiles id {../filtered/*.dcd} {
    set outch [open $id.rmsd w]
    forFrames fn $compare {
	set trans_mat [measure fit $compare $reference]
	$compare move $trans_mat
	set rmsd [measure rmsd $compare $reference]
	puts $outch "$rmsd $id $fn"
    }
    close $outch
}
}}}



